name: Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Default permissions for all jobs unless overridden
permissions: read-all

env:
  PYTHON_VERSION: '3.10'
  PACKAGE_NAME: code-preprocessor
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Needed for pushing to ghcr.io
    outputs:
      test_image_tag: ${{ steps.meta-test.outputs.tags }}
      prod_image_tag: ${{ steps.meta-prod.outputs.tags }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Log in to the Container registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for test image
        id: meta-test
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-test

      - name: Build and push test image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: .
          target: test
          push: true
          tags: ${{ steps.meta-test.outputs.tags }}
          labels: ${{ steps.meta-test.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-test:latest
          cache-to: type=inline

      - name: Extract metadata for production image
        id: meta-prod
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push production image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta-prod.outputs.tags }}
          labels: ${{ steps.meta-prod.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

  format:
    name: Code Formatting
    needs: [build-images]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-images.outputs.test_image_tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Check formatting
        run: |
          black --check .
          isort --check-only --diff .

  lint:
    name: Linting
    needs: [build-images]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-images.outputs.test_image_tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run linters
        run: |
          flake8 .
          pylint .

  type-check:
    name: Type Checking
    needs: [build-images]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-images.outputs.test_image_tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run mypy
        run: |
          mypy .

  test:
    name: Run Tests
    needs: [build-images]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Needed to read files
      checks: write   # Needed for test reporting
    container:
      image: ${{ needs.build-images.outputs.test_image_tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run tests
        run: |
          pytest --cov --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@c4cf8a4f03f0ac8585acb7c1b7ce3460ec15782f # v4.0.1
        with:
          file: ./coverage.xml
          # fail_ci_if_error: true

  build:
    name: Build Package
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-images.outputs.test_image_tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Build and check package
        run: |
          python -m build
          twine check dist/*

  compatibility:
    name: Python Compatibility
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.10', '3.11']
    container:
      image: python:${{ matrix.python-version }}-slim
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run tests
        run: |
          pytest
