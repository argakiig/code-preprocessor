name: Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  PACKAGE_NAME: code-preprocessor
  DOCKER_IMAGE: code-preprocessor-builder
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

  format:
    name: Code Formatting
    needs: [build-image]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - name: Check formatting
        run: |
          black --check .
          isort --check-only --diff .

  lint:
    name: Linting
    needs: [build-image]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - name: Run linters
        run: |
          flake8 ${{ env.PACKAGE_NAME }}/
          pylint ${{ env.PACKAGE_NAME }}/

  type-check:
    name: Type Checking
    needs: [build-image]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - name: Run mypy
        run: |
          mypy ${{ env.PACKAGE_NAME }}/

  test:
    name: Run Tests
    needs: [build-image]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - name: Run tests
        run: |
          pytest --cov --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          # fail_ci_if_error: true

  build:
    name: Build Package
    needs: [test]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - name: Build and check package
        run: |
          python -m build
          twine check dist/*

  compatibility:
    name: Python Compatibility
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.10', '3.11']
    container:
      image: python:${{ matrix.python-version }}-slim
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run tests
        run: |
          pytest
