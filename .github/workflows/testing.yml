name: Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Default permissions for all jobs unless overridden
permissions: read-all

env:
  PYTHON_VERSION: '3.10'
  PACKAGE_NAME: code-preprocessor
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Needed for pushing to ghcr.io
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@0d103c3126aa41d772a8362f6aa67afac040f80c # v3.0.0

      - name: Log in to the Container registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Store short sha
        id: short_sha
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

  format:
    name: Code Formatting
    needs: [build-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Check formatting
        run: |
          black --check .
          isort --check-only --diff .

  lint:
    name: Linting
    needs: [build-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Run linters
        run: |
          flake8 ./code_preprocessor
          pylint ./code_preprocessor

  type-check:
    name: Type Checking
    needs: [build-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Run mypy
        run: |
          mypy . --ignore-missing-imports

  test:
    name: Run Tests
    needs: [build-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Needed to read files
      checks: write   # Needed for test reporting
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Run tests
        run: |
          pytest --cov --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3.1.4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  build:
    name: Build Package
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    container:
      image: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build and check package
        run: |
          python -m build
          twine check dist/*

  compatibility:
    name: Python Compatibility
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Only needs to read files
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.10', '3.11']
    container:
      image: python:${{ matrix.python-version }}-slim
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run tests
        run: |
          pytest
